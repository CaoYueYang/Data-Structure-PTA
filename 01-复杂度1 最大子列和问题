// 给定K个整数组成的序列{ N​1​​ , N​2​​ , ..., N​K​​  }，"连续子列"被定义为{ N​i​​ 
// , N​i+1​​ , ..., N​j​​  }，其中 1≤i≤j≤K。"最大子列和"则被定义为所有连续子列元素的
// 和中最大者。例如给定序列{ -2, 11, -4, 13, -5, -2 }，其连续子列{ 11, -4, 13 }有最
// 大的和20。现要求你编写程序，计算给定整数序列的最大子列和。

// 本题旨在测试各种不同的算法在各种数据情况下的表现。各组测试数据特点如下：

// 数据1：与样例等价，测试基本正确性；
// 数据2：102个随机整数；
// 数据3：103个随机整数；
// 数据4：104个随机整数；
// 数据5：105个随机整数；
// 输入格式:
// 输入第1行给出正整数K (≤100000)；第2行给出K个整数，其间以空格分隔。

// 输出格式:
// 在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。

// 输入样例:
// 6
// -2 11 -4 13 -5 -2
// 输出样例:
// 20



#include<stdio.h>
int MaxSubseqSum(int A[],int N);//查找最大子列和的O(n)复杂度算法

int main(){
    int k,max;//k个数据，最大子列和
    scanf("%d",&k);
    int a[k];//K个数据的数组
    
    for(int i=0;i<k;i++){
        scanf("%d",&a[i]);//初始化数组
    }
    
    max=MaxSubseqSum(a,sizeof(a)/sizeof(a[k]));//传入数组和数组长度做计算
    printf("%d\n",max);
    
    return 0;
}

int MaxSubseqSum(int A[],int N){
    int ThisSum,Maxsum; //当前子列和 与最大子列和
    int i;              //控制变量
    ThisSum=Maxsum=0;   //初始化为0
    for(i=0;i<N;i++){
        ThisSum+=A[i];  //向右累加
        if(ThisSum>Maxsum)
        Maxsum=ThisSum; //最大子列和更新
        else if(ThisSum<0)
        ThisSum=0;      //如果当前子列和<0则抛弃(因为后面一点不再增加)
    }
    return Maxsum;
}
